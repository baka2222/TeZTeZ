from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
)
import os
import sys

BACKEND_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'backend'))
if BACKEND_ROOT not in sys.path:
    sys.path.insert(0, BACKEND_ROOT)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
import django
django.setup()

from client.models import Client
from asgiref.sync import sync_to_async

sellbuy_router = Router()
CHANNEL_ID = -1002615944125
CHANNEL_LINK = "https://t.me/teztezfg"

class SellFSM(StatesGroup):
    status = State()
    name = State()
    desc = State()
    price = State()
    photos = State()
    show_phone = State()
    confirm = State()

def get_status_emoji(status):
    return {
        "–ü—Ä–æ–¥–∞–∂–∞": "üí∞",
        "–û–±–º–µ–Ω": "üîÑ",
        "–ü–æ–∏—Å–∫": "üîé"
    }.get(status, "")

@sync_to_async
def get_client_phone(tg_code):
    try:
        client = Client.objects.get(tg_code=str(tg_code))
        return client.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
    except Client.DoesNotExist:
        return "–ù–µ —É–∫–∞–∑–∞–Ω"

@sellbuy_router.message(Command("sell"))
async def start_sell(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    client = await sync_to_async(Client.objects.filter(tg_code=user_id).first)()
    if not client:
        await message.answer(
            "‚ùóÔ∏è–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \n /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å", callback_data="status_sell"),
                InlineKeyboardButton(text="–û–±–º–µ–Ω", callback_data="status_exchange"),
                InlineKeyboardButton(text="–ò—â—É", callback_data="status_search"),
            ]
        ]
    )
    await message.answer(
        "üõí <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(SellFSM.status)

@sellbuy_router.callback_query(SellFSM.status)
async def choose_status(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    status_map = {
        "status_sell": "–ü—Ä–æ–¥–∞–∂–∞",
        "status_exchange": "–û–±–º–µ–Ω",
        "status_search": "–ü–æ–∏—Å–∫"
    }
    status = status_map.get(callback.data, "–ü—Ä–æ–¥–∞–∂–∞")
    await state.update_data(status=status)
    await callback.message.edit_text(
        f"–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞:",
        parse_mode="HTML"
    )
    await state.set_state(SellFSM.name)

@sellbuy_router.message(SellFSM.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–æ–≤–∞—Ä –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:\n\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏...</i>",
        parse_mode="HTML"
    )
    await state.set_state(SellFSM.desc)

@sellbuy_router.message(SellFSM.desc)
async def get_desc(message: types.Message, state: FSMContext):
    await state.update_data(desc=message.text)
    await message.answer(
        "üíµ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):",
        parse_mode="HTML"
    )
    await state.set_state(SellFSM.price)

@sellbuy_router.message(SellFSM.price)
async def get_price(message: types.Message, state: FSMContext):
    price_text = message.text.replace(" ", "")
    if not price_text.isdigit():
        await message.answer(
            "‚ùóÔ∏è–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500",
            parse_mode="HTML"
        )
        return
    await state.update_data(price=price_text)
    await state.update_data(photos=[])
    await message.answer(
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞ (–ø–æ –æ–¥–Ω–æ–π).",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(SellFSM.photos)

@sellbuy_router.message(SellFSM.photos)
async def get_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    if message.photo:
        if len(photos) >= 10:
            await message.answer(
                "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª—å—à–µ 10 —Ñ–æ—Ç–æ.",
                parse_mode="HTML"
            )
            return
        file_id = message.photo[-1].file_id
        photos.append(file_id)
        await state.update_data(photos=photos)
        if len(photos) == 1:
            kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await message.answer(
                f"–§–æ—Ç–æ {len(photos)}/10 –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ì–æ—Ç–æ–≤–æ ‚úÖ</b>.",
                reply_markup=kb,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"–§–æ—Ç–æ {len(photos)}/10 –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ì–æ—Ç–æ–≤–æ ‚úÖ</b>.",
                parse_mode="HTML"
            )
    elif message.text and "–≥–æ—Ç–æ–≤–æ" in message.text.lower():
        if not photos:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!",
                parse_mode="HTML"
            )
            return
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="show_phone_yes"),
                    InlineKeyboardButton(text="–°–∫—Ä—ã—Ç—å –Ω–æ–º–µ—Ä", callback_data="show_phone_no")
                ]
            ]
        )
        await message.answer(
            "üìû –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏?",
            reply_markup=kb
        )
        await state.set_state(SellFSM.show_phone)
    else:
        await message.answer(
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ì–æ—Ç–æ–≤–æ ‚úÖ</b>.",
            parse_mode="HTML"
        )

@sellbuy_router.callback_query(SellFSM.show_phone)
async def choose_phone_visibility(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    show_phone = callback.data == "show_phone_yes"
    await state.update_data(show_phone=show_phone)
    await callback.message.edit_text("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.")

    data = await state.get_data()
    status = data.get("status")
    name = data.get("name")
    desc = data.get("desc")
    price = data.get("price")
    photos = data.get("photos", [])
    user = callback.from_user

    phone = await get_client_phone(user.id) if show_phone else "–°–∫—Ä—ã—Ç"
    status_emoji = get_status_emoji(status)
    phone_text = f"üì± <b>–ù–æ–º–µ—Ä:</b> <a>+{phone}</a>" if show_phone else "üì± <b>–ù–æ–º–µ—Ä:</b> <i>–°–∫—Ä—ã—Ç</i>"
    price_text = f"üíµ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ"
    contact_link = f"‚úâÔ∏è <a href='tg://user?id={user.id}'>–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É</a>"

    text = (
        f"{status_emoji} <b>{status}</b>\n"
        f"üè∑ <b>{name}</b>\n\n"
        f"{desc}\n\n"
        f"{price_text}\n"
        f"{phone_text}\n"
        f"{contact_link}"
    )

    if photos:
        media = [InputMediaPhoto(media=pid) for pid in photos]
        media[0].caption = text
        media[0].parse_mode = "HTML"
        await callback.message.answer_media_group(media)
    else:
        await callback.message.answer(text, parse_mode="HTML")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="send_to_channel")]
        ]
    )
    await callback.message.answer("–ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏?", reply_markup=kb)
    await state.set_state(SellFSM.confirm)

@sellbuy_router.callback_query(SellFSM.confirm)
async def send_to_channel(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    data = await state.get_data()
    status = data.get("status")
    name = data.get("name")
    desc = data.get("desc")
    price = data.get("price")
    photos = data.get("photos", [])
    show_phone = data.get("show_phone")
    user = callback.from_user

    phone = await get_client_phone(user.id) if show_phone else "–°–∫—Ä—ã—Ç"
    status_emoji = get_status_emoji(status)
    phone_text = f"üì± <b>–ù–æ–º–µ—Ä:</b> <code>+{phone}</code>" if show_phone else "üì± <b>–ù–æ–º–µ—Ä:</b> <i>–°–∫—Ä—ã—Ç</i>"
    price_text = f"üíµ <b>–¶–µ–Ω–∞:</b> {price} KGS"
    contact_link = f"‚úâÔ∏è <a href='tg://user?id={user.id}'>–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É</a>"

    text = (
        f"{status_emoji} <b>{status}</b>\n"
        f"üè∑ <b>{name}</b>\n\n"
        f"{desc}\n\n"
        f"{price_text}\n"
        f"{phone_text}\n"
        f"{contact_link}"
    )

    if photos:
        media = [InputMediaPhoto(media=pid) for pid in photos]
        media[0].caption = text
        media[0].parse_mode = "HTML"
        await callback.bot.send_media_group(CHANNEL_ID, media)
    else:
        await callback.bot.send_message(CHANNEL_ID, text, parse_mode="HTML")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", url=CHANNEL_LINK)]
        ]
    )
    await callback.message.edit_text(
        "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\n\n"
        "–ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ –∫–∞–Ω–∞–ª–µ:",
        reply_markup=kb
    )
    await state.clear()