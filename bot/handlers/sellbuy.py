from aiogram import Router, types 
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
)
import os
import sys
from django.utils import timezone
from datetime import timedelta

BACKEND_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'backend'))
if BACKEND_ROOT not in sys.path:
    sys.path.insert(0, BACKEND_ROOT)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
import django
django.setup()

from client.models import Client
from asgiref.sync import sync_to_async

sellbuy_router = Router()

CHANNELS = {
    "–í–µ–ª–æ–º–∞—Ä–∫–µ—Ç": {
        "id": -1002615944125,
        "link": "https://t.me/teztezfg",
        "cooldown_field": "next_ability"
    },
    "–ë—å—é—Ç–∏–º–∞—Ä–∫–µ—Ç": {
        "id": -1002762051372,
        "link": "https://t.me/tezbueaty/4",
        "cooldown_field": "next_ability_beauty"
    },
    "–¢–µ—Ö–Ω–æ–º–∞—Ä–∫–µ—Ç": {
        "id": -1002897679802,
        "link": "https://t.me/teztechno/2",
        "cooldown_field": "next_ability_techno"
    },
    "–ê–≤—Ç–æ–º–æ—Ç–æ–º–∞—Ä–∫–µ—Ç": {
        "id": -1002549461746,
        "link": "https://t.me/tezautomoto/2",
        "cooldown_field": "next_ability_automoto"
    },
    "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": {
        "id": -1002711157981,
        "link": "https://t.me/tezhousing/2",
        "cooldown_field": "next_ability_housing"
    },
    "–†–∞–±–æ—Ç–∞": {
        "id": -1002788239459,
        "link": "https://t.me/tezzjob/3",
        "cooldown_field": "next_ability_job"
    }
}


class SellFSM(StatesGroup):
    category = State()
    status = State()
    name = State()
    desc = State()
    price = State()
    photos = State()
    show_phone = State()
    confirm = State()

@sync_to_async
def get_client_phone(tg_code):
    try:
        return Client.objects.get(tg_code=str(tg_code)).phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
    except Client.DoesNotExist:
        return "–ù–µ —É–∫–∞–∑–∞–Ω"

@sync_to_async
def set_next_ability(client, field_name: str):
    setattr(client, field_name, timezone.now() + timedelta(days=2))
    client.save()

@sellbuy_router.message(Command("sell"))
async def start_sell(message: types.Message, state: FSMContext):
    client = await sync_to_async(Client.objects.filter(tg_code=str(message.from_user.id)).first)()
    if not client:
        await message.answer("‚ùóÔ∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return
    if client.is_banned:
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"cat_{name}")]
        for name in CHANNELS.keys()
    ])
    await message.answer(
        "üõí <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>\n\n"
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(SellFSM.category)

@sellbuy_router.callback_query(SellFSM.category)
async def choose_category(callback: types.CallbackQuery, state: FSMContext):
    sel = callback.data.removeprefix("cat_")
    client = await sync_to_async(Client.objects.get)(tg_code=str(callback.from_user.id))
    field = CHANNELS[sel]["cooldown_field"]
    now = timezone.now()
    next_allowed = getattr(client, field)
    if next_allowed and next_allowed > now:
        wait = next_allowed - now
        total_minutes = int(wait.total_seconds() // 60)
        days = total_minutes // (24 * 60)
        hours = (total_minutes % (24 * 60)) // 60
        minutes = total_minutes % 60
        parts = []
        if days:
            parts.append(f"{days} –¥–Ω.")
        if hours:
            parts.append(f"{hours} —á.")
        if minutes:
            parts.append(f"{minutes} –º–∏–Ω.")
        if not parts:
            parts.append("–º–µ–Ω–µ–µ 1 –º–∏–Ω.")
        await callback.message.edit_text(
            f"‚è≥ –í—ã —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –≤ {sel} –Ω–µ–¥–∞–≤–Ω–æ.\n"
            f"‚è± –°–ª–µ–¥—É—é—â–µ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: {' '.join(parts)}"
        )
        await state.clear()
        return
    await state.update_data(category=sel)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data="status_sell"),
        InlineKeyboardButton(text="üîÑ –û–±–º–µ–Ω", callback_data="status_exchange"),
        InlineKeyboardButton(text="üîç –ò—â—É", callback_data="status_search"),
    ]])

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if sel == '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å':
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data="status_sell"),
            InlineKeyboardButton(text="üîë –°–¥–∞—é", callback_data="status_hand"),
            InlineKeyboardButton(text="üîç –ò—â—É", callback_data="status_search"),
        ]])
    elif sel == '–†–∞–±–æ—Ç–∞':
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üë®‚Äçüíº –†–µ–∑—é–º–µ", callback_data="status_resume"),
            InlineKeyboardButton(text="üíº –í–∞–∫–∞–Ω—Å–∏—è", callback_data="status_vacancy"),
        ]])

    await callback.message.edit_text(
        f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{sel}</b> \n\n"
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(SellFSM.status)

@sellbuy_router.callback_query(SellFSM.status)
async def choose_status(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    status_map = {
        "status_sell": "üí∞ –ü—Ä–æ–¥–∞–∂–∞", 
        "status_exchange": "üîÑ –û–±–º–µ–Ω", 
        "status_search": "üîç –ü–æ–∏—Å–∫", 
        "status_hand": "üîë –°–¥–∞—é",
        "status_resume": "üë®‚Äçüíº –†–µ–∑—é–º–µ",
        "status_vacancy": "üíº –í–∞–∫–∞–Ω—Å–∏—è"
    }
    status = status_map.get(callback.data, "üí∞ –ü—Ä–æ–¥–∞–∂–∞")
    await state.update_data(status=status)
    await callback.message.edit_text(
        f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>:",
        parse_mode="HTML"
    )
    await state.set_state(SellFSM.name)

@sellbuy_router.message(SellFSM.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        "üìù <b>–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–æ–≤–∞—Ä –ø–æ–¥—Ä–æ–±–Ω–æ:</b>\n\n"
        "<i>‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è\n"
        "‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>",
        parse_mode="HTML"
    )
    await state.set_state(SellFSM.desc)

@sellbuy_router.message(SellFSM.desc)
async def get_desc(message: types.Message, state: FSMContext):
    await state.update_data(desc=message.text)
    await message.answer(
        "üíµ <b>–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ KGS:</b>\n\n"
        "<i>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2500</i>",
        parse_mode="HTML"
    )
    await state.set_state(SellFSM.price)

@sellbuy_router.message(SellFSM.price)
async def get_price(message: types.Message, state: FSMContext):
    price_text = message.text.replace(" ", "")
    if not price_text.isdigit():
        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞!</b>\n"
            "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3500",
            parse_mode="HTML"
        )
        return
    await state.update_data(price=price_text, photos=[])
    await message.answer(
        "üì∏ <b>–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ 10 —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ <b>–ì–æ—Ç–æ–≤–æ ‚úÖ</b>",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ")]],
            resize_keyboard=True,
            one_time_keyboard=True
        ),
        parse_mode="HTML"
    )
    await state.set_state(SellFSM.photos)

@sellbuy_router.message(SellFSM.photos)
async def get_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    if message.photo:
        if len(photos) >= 10:
            await message.answer("‚ö†Ô∏è <b>–ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ!</b> –ù–∞–∂–º–∏—Ç–µ <b>–ì–æ—Ç–æ–≤–æ ‚úÖ</b>", parse_mode="HTML")
            return
        file_id = message.photo[-1].file_id
        photos.append(file_id)
        await state.update_data(photos=photos)

        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ")]],
            resize_keyboard=True
        )
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ {len(photos)}/10 –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            "–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å <b>–ì–æ—Ç–æ–≤–æ ‚úÖ</b>",
            reply_markup=kb,
            parse_mode="HTML"
        )

    elif message.text and message.text.lower() in ["–≥–æ—Ç–æ–≤–æ", "–≥–æ—Ç–æ–≤–æ ‚úÖ"]:
        if not photos:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!", reply_markup=None)
            return

        kb = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="show_phone_yes"),
                InlineKeyboardButton(text="‚ùå –°–∫—Ä—ã—Ç—å –Ω–æ–º–µ—Ä", callback_data="show_phone_no")
            ]]
        )
        await message.answer(
            "üìû <b>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏?</b>",
            reply_markup=kb,
            parse_mode="HTML"
        )
        await state.set_state(SellFSM.show_phone)
    else:
        await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ì–æ—Ç–æ–≤–æ ‚úÖ</b>", parse_mode="HTML")

@sellbuy_router.callback_query(SellFSM.show_phone)
async def choose_phone_visibility(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    show_phone = callback.data == "show_phone_yes"
    await state.update_data(show_phone=show_phone)
    data = await state.get_data()

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_emoji = {
        "üí∞ –ü—Ä–æ–¥–∞–∂–∞": "üí∞", 
        "üîÑ –û–±–º–µ–Ω": "üîÑ", 
        "üîç –ü–æ–∏—Å–∫": "üîç", 
        "üîë –°–¥–∞—é": "üîë",
        "üë®‚Äçüíº –†–µ–∑—é–º–µ": "üë®‚Äçüíº",
        "üíº –í–∞–∫–∞–Ω—Å–∏—è": "üíº"
    }
    emoji = status_emoji.get(data["status"], "")
    
    phone_text = f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {await get_client_phone(callback.from_user.id)}" if show_phone else "üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–°–∫—Ä—ã—Ç</i>"

    text = (
        f"<b>{data['status']}</b>\n"
        f"üè∑Ô∏è <b>{data['name']}</b> \n\n"
        f"{data['desc']}\n\n"
        f"üíµ <b>–¶–µ–Ω–∞:</b> {data['price']} KGS\n"
        f"{phone_text}\n"
        f"‚úâÔ∏è <a href='tg://user?id={callback.from_user.id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a>"
    )

    if data['photos']:
        media = [InputMediaPhoto(media=pid) for pid in data['photos']]
        media[0].caption = text
        media[0].parse_mode = "HTML"
        await callback.message.answer_media_group(media)
    else:
        await callback.message.answer(text, parse_mode="HTML")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_send"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel")
        ]]
    )
    await callback.message.answer(
        "üìù <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª?",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(SellFSM.confirm)

@sellbuy_router.callback_query(SellFSM.confirm)
async def send_to_channel(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "confirm_cancel":
        await callback.message.edit_text("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()
        return

    await callback.answer("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ...")
    data = await state.get_data()
    chan_info = CHANNELS[data['category']]

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_emoji = {
        "üí∞ –ü—Ä–æ–¥–∞–∂–∞": "üí∞", 
        "üîÑ –û–±–º–µ–Ω": "üîÑ", 
        "üîç –ü–æ–∏—Å–∫": "üîç", 
        "üîë –°–¥–∞—é": "üîë",
        "üë®‚Äçüíº –†–µ–∑—é–º–µ": "üë®‚Äçüíº",
        "üíº –í–∞–∫–∞–Ω—Å–∏—è": "üíº"
    }
    emoji = status_emoji.get(data["status"], "")
    
    phone_text = f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {await get_client_phone(callback.from_user.id)}" if data.get('show_phone') else "üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–°–∫—Ä—ã—Ç</i>"

    text = (
        f"<b>{data['status']}</b>\n"
        f"üè∑Ô∏è <b>{data['name']}</b> \n\n"
        f"{data['desc']}\n\n"
        f"üíµ <b>–¶–µ–Ω–∞:</b> {data['price']} KGS\n"
        f"{phone_text}\n"
        f"‚úâÔ∏è <a href='tg://user?id={callback.from_user.id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a>\n"
        f"üì¢ <a href='https://t.me/tez4917_bot'>–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>"
    )

    try:
        if data['photos']:
            media = [InputMediaPhoto(media=pid) for pid in data.get('photos', [])]
            media[0].caption = text
            media[0].parse_mode = "HTML"
            await callback.bot.send_media_group(chan_info['id'], media)
        else:
            await callback.bot.send_message(chan_info['id'], text, parse_mode="HTML")

        client = await sync_to_async(Client.objects.get)(tg_code=str(callback.from_user.id))
        await set_next_ability(client, chan_info['cooldown_field'])

        await callback.message.edit_text(
            "‚úÖ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!</b>",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", url=chan_info['link'])]
        ]
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")

    await state.clear()
