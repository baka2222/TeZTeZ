from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ContentType, ReplyKeyboardRemove
from asgiref.sync import sync_to_async
from pathlib import Path
import os, sys
from django.utils import timezone
import logging
from django.db import transaction
from math import sqrt

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ delivery –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –∏ GROUP_CHAT_ID
from .delivery import calculate_delivery_price, GROUP_CHAT_ID
from client.models import Category, Shop, Product, Service, Client, Order, OrderItem, CourierOrder

logger = logging.getLogger(__name__)

BASE_DIR = Path(__file__).resolve().parent.parent.parent
if str(BASE_DIR) not in sys.path:
    sys.path.insert(0, str(BASE_DIR))

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
import django
django.setup()

shops_router = Router()

class CartFSM(StatesGroup):
    category = State()
    shop = State()
    choosing_type = State()
    choosing_items = State()
    confirm = State()
    delivery_question = State() 
    delivery_point_b = State() 
    delivery_confirm = State()

@sync_to_async
def get_categories():
    return list(Category.objects.all())

@sync_to_async
def get_shops_by_category(cat_id):
    return list(Shop.objects.filter(category_id=cat_id))

@sync_to_async
def get_shop_by_id(shop_id):
    return Shop.objects.select_related('owner').filter(id=shop_id).first()

@sync_to_async
def get_products(shop_id):
    return list(Product.objects.filter(shop_id=shop_id))

@sync_to_async
def get_services(shop_id):
    return list(Service.objects.filter(shop_id=shop_id))

@sync_to_async
def get_client_by_tg(tg_id):
    return Client.objects.filter(tg_code=str(tg_id)).first()

@sync_to_async
def create_order(shop, client, total_price):
    return Order.objects.create(shop=shop, client=client, total_price=total_price)

@sync_to_async
def add_order_items(order, selected_objects, chosen_type):
    for item, qty in selected_objects:
        if chosen_type == 'products':
            OrderItem.objects.create(order=order, product=item, quantity=qty)
        else:
            OrderItem.objects.create(order=order, service=item, quantity=qty)

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
def generate_comment_sync(order):
    comment = f"–ó–∞–∫–∞–∑ #{order.id}\n–°–æ—Å—Ç–∞–≤:\n"
    for item in order.items.select_related('product', 'service').all():
        if item.product:
            comment += f"- {item.product.name} x {item.quantity}\n"
        elif item.service:
            comment += f"- {item.service.name} x {item.quantity}\n"
    return comment

ITEMS_PER_PAGE = 5

@shops_router.message(Command("stores"))
async def start_stores(message: types.Message, state: FSMContext):
    await state.clear()
    cats = await get_categories()
    if not cats:
        await message.answer("‚ÑπÔ∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>", parse_mode="HTML")
        return
        
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat.name, callback_data=f"cat_{cat.id}")]
        for cat in cats
    ])
    await message.answer(
        "üõí <b>–ú–∞–≥–∞–∑–∏–Ω—ã –∏ —É—Å–ª—É–≥–∏</b>\n\n"
        "üóÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(CartFSM.category)

@shops_router.callback_query(lambda c: c.data.startswith("cat_"))
async def choose_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    cat_id = int(callback.data.split("_")[1])
    shops = await get_shops_by_category(cat_id)
    if not shops:
        await callback.message.edit_text("‚ÑπÔ∏è <b>–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>", parse_mode="HTML")
        await state.clear()
        return
        
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=shop.name, callback_data=f"shop_{shop.id}")]
        for shop in shops
    ])
    await callback.message.edit_text(
        "üè™ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(CartFSM.shop)

@shops_router.callback_query(lambda c: c.data.startswith("shop_"))
async def handle_shop_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    shop_id = int(callback.data.split("_")[1])
    shop = await get_shop_by_id(shop_id)
    if not shop:
        await callback.message.edit_text("‚ùå <b>–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</b>", parse_mode="HTML")
        await state.clear()
        return
        
    await state.update_data(shop_id=shop_id)
    products = await get_products(shop_id)
    services = await get_services(shop_id)
    
    text = (
        f"üè™ <b>{shop.name}</b>\n"
        f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {shop.owner.name}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {shop.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚ÑπÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {shop.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        "üìå <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–æ–≤:</b>"
    )
    
    buttons = []
    if products: 
        buttons.append(InlineKeyboardButton(text="üõí –¢–æ–≤–∞—Ä—ã", callback_data="type_products"))
    if services: 
        buttons.append(InlineKeyboardButton(text="üõ† –£—Å–ª—É–≥–∏", callback_data="type_services"))
    
    kb = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(CartFSM.choosing_type)

@shops_router.callback_query(lambda c: c.data in ("type_products", "type_services"))
async def handle_type_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    chosen_type = callback.data.split("_")[1]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
    if 'cart_products' not in data:
        data['cart_products'] = {}
    if 'cart_services' not in data:
        data['cart_services'] = {}
    
    await state.update_data(
        chosen_type=chosen_type, 
        current_page=0,
        cart_products=data.get('cart_products', {}),
        cart_services=data.get('cart_services', {})
    )
    await state.set_state(CartFSM.choosing_items)
    await show_items_page(callback, state, 0)

async def show_items_page(callback: CallbackQuery, state: FSMContext, page: int):
    await callback.answer()
    data = await state.get_data()
    shop_id = data["shop_id"]
    chosen = data["chosen_type"]
    all_items = await get_products(shop_id) if chosen == "products" else await get_services(shop_id)
    total = len(all_items)
    start = page * ITEMS_PER_PAGE
    end = min(start + ITEMS_PER_PAGE, total)
    items_slice = all_items[start:end]
    
    text = f"üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ {chosen}:</b>\n\n"
    for item in items_slice:
        text += f"‚Ä¢ {item.name} ‚Äî <b>{item.price} KGS</b>\n"
    
    keyboard_buttons = []
    for item in items_slice:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_key = f"cart_{chosen}"
        cart = data.get(cart_key, {})
        qty = cart.get(item.id, 0)
        btn_text = f"‚ûï {item.name} ({qty})" if qty > 0 else f"‚ûï {item.name}"
        keyboard_buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"add_{chosen}_{item.id}")])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav = []
    if page > 0: 
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if end < total: 
        nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}"))
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    buttons_row = []
    if data.get('cart_products') or data.get('cart_services'):
        buttons_row.append(InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="items_done"))
    
    buttons_row.append(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞", callback_data="back_to_type"))
    
    if keyboard_buttons:
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons + [nav] + [buttons_row])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons_row])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.update_data(current_page=page)

@shops_router.callback_query(lambda c: c.data.startswith(("add_", "page_", "items_done", "back_to_type")))
async def handle_item_callbacks(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    
    if callback.data == "items_done":
        await confirm_cart(callback, state)
        return
        
    if callback.data == "back_to_type":
        await back_to_type_selection(callback, state)
        return
        
    if callback.data.startswith("page_"):
        page = int(callback.data.split("_")[1])
        await show_items_page(callback, state, page)
        return
        
    parts = callback.data.split("_")
    cart_key = f"cart_{parts[1]}"
    item_id = int(parts[2])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart = data.get(cart_key, {})
    cart[item_id] = cart.get(item_id, 0) + 1
    await state.update_data(**{cart_key: cart})
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_items_page(callback, state, data["current_page"])

async def back_to_type_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    shop_id = data["shop_id"]
    shop = await get_shop_by_id(shop_id)
    products = await get_products(shop_id)
    services = await get_services(shop_id)
    
    text = (
        f"üè™ <b>{shop.name}</b>\n"
        f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {shop.owner.name}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {shop.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚ÑπÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {shop.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        "üìå <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–æ–≤:</b>"
    )
    
    buttons = []
    if products: 
        buttons.append(InlineKeyboardButton(text="üõí –¢–æ–≤–∞—Ä—ã", callback_data="type_products"))
    if services: 
        buttons.append(InlineKeyboardButton(text="üõ† –£—Å–ª—É–≥–∏", callback_data="type_services"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
    if data.get('cart_products') or data.get('cart_services'):
        buttons.append(InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="items_done"))
    
    kb = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(CartFSM.choosing_type)

async def confirm_cart(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    shop = await get_shop_by_id(data.get("shop_id"))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
    cart_products = data.get("cart_products", {})
    cart_services = data.get("cart_services", {})
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    all_products = {p.id: p for p in await get_products(data["shop_id"])}
    all_services = {s.id: s for s in await get_services(data["shop_id"])}
    
    selected_products = []
    selected_services = []
    total_price = 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    for pid, qty in cart_products.items():
        if pid in all_products:
            item = all_products[pid]
            selected_products.append((item, qty))
            total_price += item.price * qty
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
    for sid, qty in cart_services.items():
        if sid in all_services:
            item = all_services[sid]
            selected_services.append((item, qty))
            total_price += item.price * qty
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
    if not selected_products and not selected_services:
        await callback.message.answer("‚ùå <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!</b>", parse_mode="HTML")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    for item, qty in selected_products:
        text += f"‚Ä¢ {item.name} ‚Äî <b>{item.price} KGS</b> x{qty} = <b>{item.price * qty} KGS</b>\n"
    
    for item, qty in selected_services:
        text += f"‚Ä¢ {item.name} ‚Äî <b>{item.price} KGS</b> x{qty} = <b>{item.price * qty} KGS</b>\n"
    
    text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {total_price} KGS</b>\n"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cart_confirm"),
        InlineKeyboardButton(text="üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="back_to_type"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cart_cancel")
    ]])
    
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(CartFSM.confirm)

@shops_router.callback_query(lambda c: c.data in ("cart_confirm", "cart_cancel", "back_to_type"))
async def finalize_order(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    
    if callback.data == "cart_cancel":
        await callback.message.edit_text("‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω</b>", parse_mode="HTML")
        await state.clear()
        return
        
    if callback.data == "back_to_type":
        await back_to_type_selection(callback, state)
        return
        
    client = await get_client_by_tg(callback.from_user.id)
    
    if not client:
        await callback.message.edit_text("‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="HTML")
        await state.clear()
        return
    
    shop = await get_shop_by_id(data["shop_id"])
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    cart_products = data.get("cart_products", {})
    cart_services = data.get("cart_services", {})
    
    all_products = {p.id: p for p in await get_products(data["shop_id"])}
    all_services = {s.id: s for s in await get_services(data["shop_id"])}
    
    total_price = 0
    selected_products = []
    selected_services = []
    
    for pid, qty in cart_products.items():
        if pid in all_products:
            item = all_products[pid]
            total_price += item.price * qty
            selected_products.append((item, qty))
    
    for sid, qty in cart_services.items():
        if sid in all_services:
            item = all_services[sid]
            total_price += item.price * qty
            selected_services.append((item, qty))
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order = await create_order(shop, client, total_price)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏
    if selected_products:
        await add_order_items(order, selected_products, 'products')
    if selected_services:
        await add_order_items(order, selected_services, 'services')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ #{order.id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"üè™ <b>–ú–∞–≥–∞–∑–∏–Ω:</b> {shop.name}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {total_price} KGS\n\n"
        "üöö –ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã –¥–æ—Å—Ç–∞–≤–∫—É –∑–∞–∫–∞–∑–∞?"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="delivery_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="delivery_no")]
    ])
    
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await state.update_data(order_id=order.id, shop_id=shop.id)
    await state.set_state(CartFSM.delivery_question)

@shops_router.callback_query(CartFSM.delivery_question, F.data.in_(["delivery_yes", "delivery_no"]))
async def handle_delivery_choice(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    
    if callback.data == "delivery_no":
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            order_id = data['order_id']
            shop_id = data['shop_id']
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ –ë–î
            order = await sync_to_async(Order.objects.get)(id=order_id)
            shop = await get_shop_by_id(shop_id)
            client = await get_client_by_tg(callback.from_user.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞
            owner_message = (
                f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}</b>\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client.name} ({client.phone})\n"
                f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
            def get_order_items_sync(order_id):
                order = Order.objects.get(id=order_id)
                return list(order.items.select_related('product', 'service').all())
            
            order_items = await sync_to_async(get_order_items_sync)(order_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö/—É—Å–ª—É–≥–∞—Ö
            for item in order_items:
                if item.product:
                    owner_message += f"  - {item.product.name} √ó {item.quantity} = {item.product.price * item.quantity} KGS\n"
                elif item.service:
                    owner_message += f"  - {item.service.name} √ó {item.quantity} = {item.service.price * item.quantity} KGS\n"
            
            owner_message += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {order.total_price} KGS</b>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –º–∞–≥–∞–∑–∏–Ω–∞
            await callback.bot.send_message(
                chat_id=shop.owner.tg_code,
                text=owner_message,
                parse_mode="HTML"
            )
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            await callback.message.edit_text(
                "‚úÖ <b>–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.</b>\n\n"
                "üìû –í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Order notification error: {e}", exc_info=True)
            await callback.message.edit_text(
                "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É.",
                parse_mode="HTML"
            )
        finally:
            await state.clear()
        return
        
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
    shop = await get_shop_by_id(data['shop_id'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if not shop.point_a_lat or not shop.point_a_lng:
        await callback.message.answer("‚ùå –í —ç—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞")
        await state.clear()
        return
        
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ—á–∫—É –ë
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text='üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏', request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer(
        "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ–∑—Ç–∏ –∑–∞–∫–∞–∑):",
        reply_markup=kb
    )
    await state.set_state(CartFSM.delivery_point_b)

@shops_router.message(CartFSM.delivery_point_b, F.content_type == ContentType.LOCATION)
async def get_delivery_point_b(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        shop = await get_shop_by_id(data['shop_id'])
        order_id = data['order_id']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ORM
        def get_order_sync(order_id):
            return Order.objects.get(id=order_id)
        
        order = await sync_to_async(get_order_sync)(order_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        comment = await sync_to_async(generate_comment_sync)(order)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        point_a = (shop.point_a_lat, shop.point_a_lng)
        point_b = (message.location.latitude, message.location.longitude)
        price, distance = await calculate_delivery_price(point_a, point_b)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(
            point_b=point_b,
            comment=comment,
            price=price,
            distance=distance
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
        preview = (
            f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ #{order.id}\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {shop.name}\n"
            f"üìç –û—Ç–∫—É–¥–∞: {shop.address or '–º–∞–≥–∞–∑–∏–Ω'}\n"
            f"üìç –ö—É–¥–∞: –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
            f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {price:.2f} —Å–æ–º"
        )
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='delivery_confirm')],
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='delivery_cancel')]
        ])
        
        await message.answer(preview, reply_markup=ReplyKeyboardRemove())
        await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É:", reply_markup=kb)
        await state.set_state(CartFSM.delivery_confirm)
    except Exception as e:
        logger.error(f"Delivery location error: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")
        await state.clear()

@shops_router.callback_query(CartFSM.delivery_confirm, F.data.in_(['delivery_confirm', 'delivery_cancel']))
async def handle_delivery_confirmation(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    
    if cb.data == 'delivery_cancel':
        await cb.message.edit_text('‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
        await state.clear()
        return
        
    try:
        data = await state.get_data()
        client = await get_client_by_tg(cb.from_user.id)
        shop = await get_shop_by_id(data['shop_id'])
        point_b = data['point_b']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        def create_delivery_order_sync():
            return CourierOrder.objects.create(
                client=client,
                point_a_lat=shop.point_a_lat,
                point_a_lng=shop.point_a_lng,
                point_b_lat=point_b[0],
                point_b_lng=point_b[1],
                comment=data['comment'],
                status='new',
                price=data['price'],
                distance_km=data['distance'],
                created_at=timezone.now()
            )
        
        order = await sync_to_async(create_delivery_order_sync)()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∫—É—Ä—å–µ—Ä–æ–≤
        text = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ #{order.id}\n"
            f"üè™ –ò–∑ –º–∞–≥–∞–∑–∏–Ω–∞: {shop.name}\n"
            f"üìç –¢–æ—á–∫–∞ –ê: –º–∞–≥–∞–∑–∏–Ω\n"
            f"üìç –¢–æ—á–∫–∞ –ë: –∫–ª–∏–µ–Ω—Ç\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order.price:.2f} —Å–æ–º\n"
            f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {order.distance_km:.2f} –∫–º"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üö¥ –í–∑—è—Ç—å –∑–∞–∫–∞–∑', callback_data=f'delivery_take_{order.id}')]
        ])
        await cb.bot.send_message(GROUP_CHAT_ID, text, reply_markup=kb)
        
        await cb.message.edit_text('‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä–∞–º!')
    except Exception as e:
        logger.error(f"Delivery order error: {e}", exc_info=True)
        await cb.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏')
    finally:
        await state.clear()

@shops_router.callback_query()
async def catch_all(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()