from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from asgiref.sync import sync_to_async
from pathlib import Path
from collections import Counter
import os, sys

BASE_DIR = Path(__file__).resolve().parent.parent.parent
if str(BASE_DIR) not in sys.path:
    sys.path.insert(0, str(BASE_DIR))

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
import django
django.setup()

from client.models import Shop, Product, Service, Client, Order, OrderItem

shops_router = Router()

class CartFSM(StatesGroup):
    shop           = State()
    choosing_type  = State()
    choosing_items = State()
    confirm        = State()

@sync_to_async
def get_all_shops():
    return list(Shop.objects.all())

@sync_to_async
def get_shop_by_id(shop_id):
    return Shop.objects.select_related('owner').filter(id=shop_id).first()

@sync_to_async
def get_products(shop_id):
    return list(Product.objects.filter(shop_id=shop_id))

@sync_to_async
def get_services(shop_id):
    return list(Service.objects.filter(shop_id=shop_id))

@sync_to_async
def get_client_by_tg(tg_id):
    return Client.objects.filter(tg_code=str(tg_id)).first()

@sync_to_async
def create_order(shop, client, total_price):
    order = Order.objects.create(
        shop=shop,
        client=client,
        total_price=total_price
    )
    return order

@sync_to_async
def add_order_items(order, selected_objects, chosen_type):
    if chosen_type == "products":
        for item, qty in selected_objects:
            OrderItem.objects.create(order=order, product=item, quantity=qty)
    elif chosen_type == "services":
        for item, qty in selected_objects:
            OrderItem.objects.create(order=order, service=item, quantity=qty)

ITEMS_PER_PAGE = 5

@shops_router.message(Command("repair"))
async def start_repair(message: types.Message, state: FSMContext):
    await state.clear()
    shops = await get_all_shops()
    if not shops:
        await message.answer("‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö.")
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=shop.name, callback_data=f"shop_{shop.id}")]
            for shop in shops
        ]
    )
    await message.answer("üè™ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é:</b>", reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(CartFSM.shop)

@shops_router.callback_query(lambda c: c.data.startswith("shop_"))
async def handle_shop_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        shop_id = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /repair.")
        return

    shop = await get_shop_by_id(shop_id)
    if not shop:
        await callback.message.answer("‚ùå –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /repair.")
        return

    await state.update_data(shop_id=shop_id)
    products = await get_products(shop_id)
    services = await get_services(shop_id)

    text = (
        f"üè™ <b>{shop.name}</b>\n"
        f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {shop.owner.name}\n"
        f"üìç –ê–¥—Ä–µ—Å: {shop.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚ÑπÔ∏è {shop.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
    )

    buttons = []
    if products:
        buttons.append(InlineKeyboardButton(text="üõí –¢–æ–≤–∞—Ä—ã", callback_data="type_products"))
    if services:
        buttons.append(InlineKeyboardButton(text="üõ† –£—Å–ª—É–≥–∏", callback_data="type_services"))

    if not buttons:
        text += "‚ö†Ô∏è –í —ç—Ç–æ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –Ω–µ—Ç –Ω–∏ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∏ —É—Å–ª—É–≥.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–∞—Å—Ç–µ—Ä—Å–∫—É—é: /repair"
        await callback.message.edit_text(text, parse_mode="HTML")
        await state.clear()
        return

    text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ:"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(CartFSM.choosing_type)

@shops_router.callback_query(lambda c: c.data in ("type_products", "type_services"))
async def handle_type_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    shop_id = data.get("shop_id")
    if not shop_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /repair.")
        await state.clear()
        return

    chosen_type = callback.data.split("_")[1]
    cart_products = data.get("cart_products", [])
    cart_services = data.get("cart_services", [])
    await state.update_data(
        chosen_type=chosen_type,
        current_page=0,
        cart_products=cart_products,
        cart_services=cart_services
    )
    await state.set_state(CartFSM.choosing_items)
    await show_items_page(callback, state, page=0)

async def show_items_page(callback: CallbackQuery, state: FSMContext, page: int):
    await callback.answer()
    data = await state.get_data()
    shop_id = data["shop_id"]
    chosen = data["chosen_type"]

    all_items = await get_products(shop_id) if chosen == "products" else await get_services(shop_id)
    total = len(all_items)
    if total == 0:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ù–µ—Ç { '—Ç–æ–≤–∞—Ä–æ–≤' if chosen=='products' else '—É—Å–ª—É–≥' } –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
            "–í–≤–µ–¥–∏—Ç–µ /repair, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()
        return

    start = page * ITEMS_PER_PAGE
    end = min(start + ITEMS_PER_PAGE, total)
    items_slice = all_items[start:end]

    text = f"üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ {'—Ç–æ–≤–∞—Ä—ã' if chosen=='products' else '—É—Å–ª—É–≥–∏'} (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</b>\n"
    for item in items_slice:
        text += f"‚Ä¢ {item.name} ‚Äî {item.price} KGS\n"
    text += "\n"

    keyboard_buttons = []
    for item in items_slice:
        callback_key = f"add_{chosen[:-1]}_{item.id}"
        keyboard_buttons.append([InlineKeyboardButton(text=f"‚ûï {item.name}", callback_data=callback_key)])

    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if end < total:
        nav_row.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°", callback_data=f"page_{page+1}"))
    nav_row.append(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="items_done"))

    back_to_type = InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="back_to_type")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=keyboard_buttons + [nav_row] + [[back_to_type]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.update_data(current_page=page)

@shops_router.callback_query(lambda c: c.data.startswith(("add_", "page_", "items_done", "back_to_type")))
async def handle_item_callbacks(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    shop_id = data.get("shop_id")
    chosen = data.get("chosen_type")
    current_page = data.get("current_page", 0)

    if not shop_id or not chosen:
        await callback.message.answer("‚ùå –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /repair –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return

    if callback.data == "back_to_type":
        shop = await get_shop_by_id(shop_id)
        products = await get_products(shop_id)
        services = await get_services(shop_id)
        text = (
            f"üè™ <b>{shop.name}</b>\n"
            f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {shop.owner.name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {shop.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚ÑπÔ∏è {shop.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ:"
        )
        buttons = []
        if products:
            buttons.append(InlineKeyboardButton(text="üõí –¢–æ–≤–∞—Ä—ã", callback_data="type_products"))
        if services:
            buttons.append(InlineKeyboardButton(text="üõ† –£—Å–ª—É–≥–∏", callback_data="type_services"))
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(CartFSM.choosing_type)
        return

    if callback.data.startswith("page_"):
        try:
            new_page = int(callback.data.split("_")[1])
        except ValueError:
            await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
            return
        await show_items_page(callback, state, new_page)
        return

    if callback.data == "items_done":
        await confirm_cart(callback, state)
        return

    parts = callback.data.split("_")
    if len(parts) == 3 and parts[0] == "add":
        item_type, item_id_str = parts[1], parts[2]
        try:
            item_id = int(item_id_str)
        except ValueError:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —ç–ª–µ–º–µ–Ω—Ç–∞.")
            return

        if item_type == "product":
            all_items = await get_products(shop_id)
            found = next((i for i in all_items if i.id == item_id), None)
            if not found:
                await callback.message.answer("‚ùå –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            cart_products = data.get("cart_products", [])
            cart_products.append(item_id)
            await state.update_data(cart_products=cart_products)
            count = Counter(cart_products)[item_id]
            await callback.message.answer(f"‚úîÔ∏è ¬´{found.name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É (x{count}).")
        elif item_type == "service":
            all_items = await get_services(shop_id)
            found = next((i for i in all_items if i.id == item_id), None)
            if not found:
                await callback.message.answer("‚ùå –≠—Ç–∞ —É—Å–ª—É–≥–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                return
            cart_services = data.get("cart_services", [])
            cart_services.append(item_id)
            await state.update_data(cart_services=cart_services)
            count = Counter(cart_services)[item_id]
            await callback.message.answer(f"‚úîÔ∏è ¬´{found.name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É (x{count}).")
        return

    await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /repair, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

async def confirm_cart(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    shop_id = data.get("shop_id")
    cart_products = data.get("cart_products", [])
    cart_services = data.get("cart_services", [])

    if not cart_products and not cart_services:
        await callback.message.answer("‚ö†Ô∏è –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç.")
        return

    shop = await get_shop_by_id(shop_id)
    if not shop:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /repair.")
        await state.clear()
        return

    all_products = await get_products(shop_id)
    all_services = await get_services(shop_id)

    counter_products = Counter(cart_products)
    counter_services = Counter(cart_services)
    selected_products = []
    selected_services = []
    total_price = 0

    for item in all_products:
        qty = counter_products.get(item.id, 0)
        if qty > 0:
            selected_products.append((item, qty))
            total_price += item.price * qty

    for item in all_services:
        qty = counter_services.get(item.id, 0)
        if qty > 0:
            selected_services.append((item, qty))
            total_price += item.price * qty

    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    if selected_products:
        text += "<b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        for item, qty in selected_products:
            text += f"‚Ä¢ {item.name} ‚Äî {item.price} KGS x {qty} = {item.price * qty} KGS\n"
    if selected_services:
        text += "<b>–£—Å–ª—É–≥–∏:</b>\n"
        for item, qty in selected_services:
            text += f"‚Ä¢ {item.name} ‚Äî {item.price} KGS x {qty} = {item.price * qty} KGS\n"
    text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total_price} KGS\n\n"
    text += "<i>–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª.</i>"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cart_confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cart_cancel")
            ]
        ]
    )
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(CartFSM.confirm)

@shops_router.callback_query(lambda c: c.data in ("cart_confirm", "cart_cancel"))
async def finalize_order(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()

    if callback.data == "cart_cancel":
        await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        await state.clear()
        return

    user = callback.from_user
    client = await get_client_by_tg(user.id)
    if not client:
        await callback.message.answer("‚ùóÔ∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ /start.")
        await state.clear()
        return

    shop_id = data.get("shop_id")
    cart_products = data.get("cart_products", [])
    cart_services = data.get("cart_services", [])

    shop = await get_shop_by_id(shop_id)
    if not shop:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /repair.")
        await state.clear()
        return

    all_products = await get_products(shop_id)
    all_services = await get_services(shop_id)

    counter_products = Counter(cart_products)
    counter_services = Counter(cart_services)
    selected_products = []
    selected_services = []
    total_price = 0

    for item in all_products:
        qty = counter_products.get(item.id, 0)
        if qty > 0:
            selected_products.append((item, qty))
            total_price += item.price * qty

    for item in all_services:
        qty = counter_services.get(item.id, 0)
        if qty > 0:
            selected_services.append((item, qty))
            total_price += item.price * qty

    try:
        order = await create_order(
            shop=shop,
            client=client,
            total_price=total_price
        )
    except Exception as e:
        print("Error creating order:", e)
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    for item, qty in selected_products:
        await add_order_items(order, [(item, qty)], "products")
    for item, qty in selected_services:
        await add_order_items(order, [(item, qty)], "services")

    await callback.message.edit_text(
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
        f"–°—É–º–º–∞: {total_price} KGS\n"
        "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
    )

    await state.clear()

@shops_router.callback_query()
async def catch_all_callbacks(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    current_state = await state.get_state()
    if current_state:
        await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í–≤–µ–¥–∏—Ç–µ /repair –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
    else:
        await callback.message.answer("‚ÑπÔ∏è –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –≤–≤–µ–¥–∏—Ç–µ /repair.")